{"cells":[{"cell_type":"markdown","metadata":{"id":"a2945b87"},"source":["## Downloading database"],"id":"a2945b87"},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23125,"status":"ok","timestamp":1700102354092,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"gfmRL43DWmaj","outputId":"00368687-1b39-49fc-a834-cb55169e9e7d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"id":"gfmRL43DWmaj"},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1639,"status":"ok","timestamp":1700102368636,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"bc02f347","outputId":"1b0aef0e-f7db-41a6-c428-85818c853941"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-11-16 02:39:26--  https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n","Resolving s3.amazonaws.com (s3.amazonaws.com)... 52.217.166.192, 54.231.138.216, 54.231.235.160, ...\n","Connecting to s3.amazonaws.com (s3.amazonaws.com)|52.217.166.192|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 13565642 (13M) [application/zip]\n","Saving to: ‘jena_climate_2009_2016.csv.zip’\n","\n","jena_climate_2009_2 100%[===================>]  12.94M  21.2MB/s    in 0.6s    \n","\n","2023-11-16 02:39:27 (21.2 MB/s) - ‘jena_climate_2009_2016.csv.zip’ saved [13565642/13565642]\n","\n","Archive:  jena_climate_2009_2016.csv.zip\n","  inflating: jena_climate_2009_2016.csv  \n","  inflating: __MACOSX/._jena_climate_2009_2016.csv  \n"]}],"source":["!wget https://s3.amazonaws.com/keras-datasets/jena_climate_2009_2016.csv.zip\n","!unzip jena_climate_2009_2016.csv.zip"],"id":"bc02f347"},{"cell_type":"markdown","metadata":{"id":"f53ef32a"},"source":["## Libraries to use"],"id":"f53ef32a"},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":3901,"status":"ok","timestamp":1700102385852,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"2caeffa8-aafe-459c-9d5e-68b27c9d0de0"},"outputs":[],"source":["import os\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","from tensorflow.keras.models import Model, Sequential\n","from tensorflow.keras.layers import Input, LSTM, Dense, Dropout\n","from tensorflow.keras.optimizers import SGD, Adam\n","from tensorflow.keras.losses import MeanSquaredError\n","from tensorflow.keras.callbacks import ModelCheckpoint"],"id":"2caeffa8-aafe-459c-9d5e-68b27c9d0de0"},{"cell_type":"markdown","metadata":{"id":"cdc8bc36"},"source":["## Preparing data to use"],"id":"cdc8bc36"},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":310},"executionInfo":{"elapsed":453,"status":"ok","timestamp":1700102387574,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"8e2a107b","outputId":"a87fe051-3a8c-4fe5-d9ec-90f418ca9610"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Date Time  p (mbar)  T (degC)  Tpot (K)  Tdew (degC)  rh (%)  \\\n","0  01.01.2009 00:10:00    996.52     -8.02    265.40        -8.90    93.3   \n","1  01.01.2009 00:20:00    996.57     -8.41    265.01        -9.28    93.4   \n","2  01.01.2009 00:30:00    996.53     -8.51    264.91        -9.31    93.9   \n","3  01.01.2009 00:40:00    996.51     -8.31    265.12        -9.07    94.2   \n","4  01.01.2009 00:50:00    996.51     -8.27    265.15        -9.04    94.1   \n","\n","   VPmax (mbar)  VPact (mbar)  VPdef (mbar)  sh (g/kg)  H2OC (mmol/mol)  \\\n","0          3.33          3.11          0.22       1.94             3.12   \n","1          3.23          3.02          0.21       1.89             3.03   \n","2          3.21          3.01          0.20       1.88             3.02   \n","3          3.26          3.07          0.19       1.92             3.08   \n","4          3.27          3.08          0.19       1.92             3.09   \n","\n","   rho (g/m**3)  wv (m/s)  max. wv (m/s)  wd (deg)  \n","0       1307.75      1.03           1.75     152.3  \n","1       1309.80      0.72           1.50     136.1  \n","2       1310.24      0.19           0.63     171.6  \n","3       1309.19      0.34           0.50     198.0  \n","4       1309.00      0.32           0.63     214.3  "],"text/html":["\n","  <div id=\"df-9573249c-fe30-43c4-969f-5227264fdba6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date Time</th>\n","      <th>p (mbar)</th>\n","      <th>T (degC)</th>\n","      <th>Tpot (K)</th>\n","      <th>Tdew (degC)</th>\n","      <th>rh (%)</th>\n","      <th>VPmax (mbar)</th>\n","      <th>VPact (mbar)</th>\n","      <th>VPdef (mbar)</th>\n","      <th>sh (g/kg)</th>\n","      <th>H2OC (mmol/mol)</th>\n","      <th>rho (g/m**3)</th>\n","      <th>wv (m/s)</th>\n","      <th>max. wv (m/s)</th>\n","      <th>wd (deg)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>01.01.2009 00:10:00</td>\n","      <td>996.52</td>\n","      <td>-8.02</td>\n","      <td>265.40</td>\n","      <td>-8.90</td>\n","      <td>93.3</td>\n","      <td>3.33</td>\n","      <td>3.11</td>\n","      <td>0.22</td>\n","      <td>1.94</td>\n","      <td>3.12</td>\n","      <td>1307.75</td>\n","      <td>1.03</td>\n","      <td>1.75</td>\n","      <td>152.3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>01.01.2009 00:20:00</td>\n","      <td>996.57</td>\n","      <td>-8.41</td>\n","      <td>265.01</td>\n","      <td>-9.28</td>\n","      <td>93.4</td>\n","      <td>3.23</td>\n","      <td>3.02</td>\n","      <td>0.21</td>\n","      <td>1.89</td>\n","      <td>3.03</td>\n","      <td>1309.80</td>\n","      <td>0.72</td>\n","      <td>1.50</td>\n","      <td>136.1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>01.01.2009 00:30:00</td>\n","      <td>996.53</td>\n","      <td>-8.51</td>\n","      <td>264.91</td>\n","      <td>-9.31</td>\n","      <td>93.9</td>\n","      <td>3.21</td>\n","      <td>3.01</td>\n","      <td>0.20</td>\n","      <td>1.88</td>\n","      <td>3.02</td>\n","      <td>1310.24</td>\n","      <td>0.19</td>\n","      <td>0.63</td>\n","      <td>171.6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>01.01.2009 00:40:00</td>\n","      <td>996.51</td>\n","      <td>-8.31</td>\n","      <td>265.12</td>\n","      <td>-9.07</td>\n","      <td>94.2</td>\n","      <td>3.26</td>\n","      <td>3.07</td>\n","      <td>0.19</td>\n","      <td>1.92</td>\n","      <td>3.08</td>\n","      <td>1309.19</td>\n","      <td>0.34</td>\n","      <td>0.50</td>\n","      <td>198.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>01.01.2009 00:50:00</td>\n","      <td>996.51</td>\n","      <td>-8.27</td>\n","      <td>265.15</td>\n","      <td>-9.04</td>\n","      <td>94.1</td>\n","      <td>3.27</td>\n","      <td>3.08</td>\n","      <td>0.19</td>\n","      <td>1.92</td>\n","      <td>3.09</td>\n","      <td>1309.00</td>\n","      <td>0.32</td>\n","      <td>0.63</td>\n","      <td>214.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9573249c-fe30-43c4-969f-5227264fdba6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9573249c-fe30-43c4-969f-5227264fdba6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9573249c-fe30-43c4-969f-5227264fdba6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0ead5889-7349-4279-9dff-9b70fd20ad60\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ead5889-7349-4279-9dff-9b70fd20ad60')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0ead5889-7349-4279-9dff-9b70fd20ad60 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}],"source":["data = pd.read_csv(\"jena_climate_2009_2016.csv\")\n","# data.shape\n","data.head()\n","# data.describe()"],"id":"8e2a107b"},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":225},"executionInfo":{"elapsed":197,"status":"ok","timestamp":1700103649353,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"D9IHxpo9v1rA","outputId":"4cbb9f4d-e20d-4a7d-cfea-d57e775c5c0e"},"outputs":[{"output_type":"stream","name":"stdout","text":["(420451, 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["   T (degC)\n","0     -8.02\n","1     -8.41\n","2     -8.51\n","3     -8.31\n","4     -8.27"],"text/html":["\n","  <div id=\"df-fe303dea-96a5-4ce9-9b8f-74b444efa88f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>T (degC)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-8.02</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-8.41</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-8.51</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>-8.31</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-8.27</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe303dea-96a5-4ce9-9b8f-74b444efa88f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-fe303dea-96a5-4ce9-9b8f-74b444efa88f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-fe303dea-96a5-4ce9-9b8f-74b444efa88f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-97e22409-4424-4095-992d-5618f09860ec\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97e22409-4424-4095-992d-5618f09860ec')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-97e22409-4424-4095-992d-5618f09860ec button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":7}],"source":["# for univariate LSTM\n","\n","# extract temperature feature as DataFrame so that shape is as required by LSTM layer (layer, sequence_lenght, feature)\n","temperature = data[['T (degC)']]\n","print(temperature.shape)\n","temperature.head()"],"id":"D9IHxpo9v1rA"},{"cell_type":"code","source":["# for multivariate LSTM\n","\n","features = data.loc[:, ['p (mbar)', 'rh (%)', 'H2OC (mmol/mol)', 'rho (g/m**3)']]\n","print(features.shape)\n","features.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":225},"id":"DsPaPcDvoJLG","executionInfo":{"status":"ok","timestamp":1700104451814,"user_tz":360,"elapsed":424,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"}},"outputId":"bd4456d4-55c5-4fdc-f86d-649dedfe63fb"},"id":"DsPaPcDvoJLG","execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["(420451, 4)\n"]},{"output_type":"execute_result","data":{"text/plain":["   p (mbar)  rh (%)  H2OC (mmol/mol)  rho (g/m**3)\n","0    996.52    93.3             3.12       1307.75\n","1    996.57    93.4             3.03       1309.80\n","2    996.53    93.9             3.02       1310.24\n","3    996.51    94.2             3.08       1309.19\n","4    996.51    94.1             3.09       1309.00"],"text/html":["\n","  <div id=\"df-19791031-e783-4f46-92d8-83c24a7ab640\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>p (mbar)</th>\n","      <th>rh (%)</th>\n","      <th>H2OC (mmol/mol)</th>\n","      <th>rho (g/m**3)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>996.52</td>\n","      <td>93.3</td>\n","      <td>3.12</td>\n","      <td>1307.75</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>996.57</td>\n","      <td>93.4</td>\n","      <td>3.03</td>\n","      <td>1309.80</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>996.53</td>\n","      <td>93.9</td>\n","      <td>3.02</td>\n","      <td>1310.24</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>996.51</td>\n","      <td>94.2</td>\n","      <td>3.08</td>\n","      <td>1309.19</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>996.51</td>\n","      <td>94.1</td>\n","      <td>3.09</td>\n","      <td>1309.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19791031-e783-4f46-92d8-83c24a7ab640')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-19791031-e783-4f46-92d8-83c24a7ab640 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-19791031-e783-4f46-92d8-83c24a7ab640');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-053d4d90-76af-4055-bd23-fe2888f799af\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-053d4d90-76af-4055-bd23-fe2888f799af')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-053d4d90-76af-4055-bd23-fe2888f799af button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":843},"executionInfo":{"elapsed":782,"status":"ok","timestamp":1700104456167,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"705056c0","outputId":"0461ce84-9bc6-41be-859f-90dbb039f865"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# One week of data plotted\n","plt.plot(range(1440*7), temperature[:1440*7])\n","plt.show()\n","plt.plot(range(1440*7), features[:1440*7])\n","plt.show()"],"id":"705056c0"},{"cell_type":"markdown","metadata":{"id":"cc7a274d"},"source":["### Definition of Train, Validation and Test datasets"],"id":"cc7a274d"},{"cell_type":"markdown","source":["For data segmentation"],"metadata":{"id":"rqIMB_tuz838"},"id":"rqIMB_tuz838"},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":270,"status":"ok","timestamp":1700104459699,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"44c30a3f"},"outputs":[],"source":["num_train_samples = len(data)//2\n","num_val_samples = len(data)//4\n","num_test_samples = num_val_samples"],"id":"44c30a3f"},{"cell_type":"markdown","source":["Univariate timeseries"],"metadata":{"id":"JS_pYU030HYI"},"id":"JS_pYU030HYI"},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":516,"status":"ok","timestamp":1700104465007,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"9d74c0eb"},"outputs":[],"source":["utrain_dataset = keras.preprocessing.timeseries_dataset_from_array(\n","    data = temperature[:-130],\n","    targets = temperature[130:],\n","    sequence_length = 120,\n","    batch_size = 64,\n","    start_index = 0,\n","    end_index = num_train_samples)"],"id":"9d74c0eb"},{"cell_type":"code","execution_count":null,"metadata":{"id":"ffc8b21d-0dcf-440c-84ba-d4c2ef5fa98e"},"outputs":[],"source":["uval_dataset = keras.utils.timeseries_dataset_from_array(\n","    data = temperature[:-130],\n","    targets = temperature[130:],\n","    sequence_length = 120,\n","    batch_size = 64,\n","    start_index = num_train_samples,\n","    end_index = num_train_samples + num_val_samples)"],"id":"ffc8b21d-0dcf-440c-84ba-d4c2ef5fa98e"},{"cell_type":"markdown","source":["Multivariate timeseries"],"metadata":{"id":"3JkBixaz0L_7"},"id":"3JkBixaz0L_7"},{"cell_type":"code","source":["mtrain_dataset = keras.preprocessing.timeseries_dataset_from_array(\n","    data = features[:-130],\n","    targets = temperature[130:],\n","    sequence_length = 120,\n","    batch_size = 64,\n","    start_index = 0,\n","    end_index = num_train_samples)"],"metadata":{"id":"c7dw0VrX0OQz"},"id":"c7dw0VrX0OQz","execution_count":null,"outputs":[]},{"cell_type":"code","source":["mval_dataset = keras.utils.timeseries_dataset_from_array(\n","    data = features[:-130],\n","    targets = temperature[130:],\n","    sequence_length = 120,\n","    batch_size = 64,\n","    start_index = num_train_samples,\n","    end_index = num_train_samples + num_val_samples)"],"metadata":{"id":"OfGJHpr_0fAg"},"id":"OfGJHpr_0fAg","execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e3161089"},"source":["## Using LSTM layer for the timeseries neural network"],"id":"e3161089"},{"cell_type":"code","execution_count":null,"metadata":{"id":"1e6ebdc6-db3a-4112-a29b-3b2828caac23"},"outputs":[],"source":["lr = 0.001\n","epochs = 10"],"id":"1e6ebdc6-db3a-4112-a29b-3b2828caac23"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":414,"status":"ok","timestamp":1700083532049,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"b3389a5d-c3dc-4929-bef5-fd77b07435d3","outputId":"127d60b4-f16b-437d-e5f4-424fb0ef158d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Univariate\n","Input shape: (64, 120, 1) \n","Target shape: (64, 1) \n","\n","Multivariate\n","Input shape: (64, 120, 4) \n","Target shape: (64, 1)\n"]}],"source":["for batch in utrain_dataset.take(1):\n","    uinputs, utargets = batch\n","\n","print('Univariate')\n","print(\"Input shape:\", uinputs.shape, '\\nTarget shape:', utargets.shape, '\\n')\n","\n","for batch in mtrain_dataset.take(1):\n","    minputs, mtargets = batch\n","\n","print('Multivariate')\n","print(\"Input shape:\", minputs.shape, '\\nTarget shape:', mtargets.shape)"],"id":"b3389a5d-c3dc-4929-bef5-fd77b07435d3"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":513,"status":"ok","timestamp":1700085019799,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"},"user_tz":360},"id":"0a5988f4","outputId":"a73005ac-b1b2-48ce-8d12-4783134cdf40"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_1 (LSTM)               (None, 16)                1152      \n","                                                                 \n"," dense_1 (Dense)             (None, 1)                 17        \n","                                                                 \n","=================================================================\n","Total params: 1169 (4.57 KB)\n","Trainable params: 1169 (4.57 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}],"source":["model = Sequential()\n","model.add(LSTM(16, input_shape=(uinputs.shape[1], uinputs.shape[2])))  # (sequence_lenght=120 , features(temperature)=1)\n","model.add(Dense(1))\n","\n","model.compile(optimizer='adam', loss='mae')\n","model.summary()"],"id":"0a5988f4"},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"80d4ebac-56ee-4786-a6d1-b6230f16b9e6","executionInfo":{"status":"ok","timestamp":1700085617236,"user_tz":360,"elapsed":589343,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"}},"outputId":"d5233891-34b6-43b7-b201-7ebba7fa88a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","3283/3283 [==============================] - 66s 20ms/step - loss: 2.3841 - val_loss: 1.3030\n","Epoch 2/10\n","   9/3283 [..............................] - ETA: 45s - loss: 0.7437"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]},{"output_type":"stream","name":"stdout","text":["3283/3283 [==============================] - 57s 17ms/step - loss: 1.1351 - val_loss: 1.2392\n","Epoch 3/10\n","3283/3283 [==============================] - 58s 18ms/step - loss: 1.0215 - val_loss: 1.1971\n","Epoch 4/10\n","3283/3283 [==============================] - 57s 17ms/step - loss: 0.9806 - val_loss: 1.1863\n","Epoch 5/10\n","3283/3283 [==============================] - 62s 19ms/step - loss: 0.9553 - val_loss: 1.1951\n","Epoch 6/10\n","3283/3283 [==============================] - 58s 18ms/step - loss: 0.9353 - val_loss: 1.2005\n","Epoch 7/10\n","3283/3283 [==============================] - 57s 17ms/step - loss: 0.9236 - val_loss: 1.0639\n","Epoch 8/10\n","3283/3283 [==============================] - 58s 18ms/step - loss: 0.8956 - val_loss: 1.0432\n","Epoch 9/10\n","3283/3283 [==============================] - 57s 17ms/step - loss: 0.8804 - val_loss: 1.0279\n","Epoch 10/10\n","3283/3283 [==============================] - 60s 18ms/step - loss: 0.8687 - val_loss: 1.0038\n"]}],"source":["checkpoint = ModelCheckpoint('BestModel.hdf5', monitor='val_loss', save_best_only=True, mode='min')\n","history = model.fit(utrain_dataset, epochs=epochs, validation_data=uval_dataset, callbacks=[checkpoint])"],"id":"80d4ebac-56ee-4786-a6d1-b6230f16b9e6"},{"cell_type":"code","source":["model2 = Sequential()\n","model2.add(LSTM(16, input_shape=(minputs.shape[1], minputs.shape[2])))  # (sequence_lenght=120 , features=4)\n","model2.add(Dense(1))\n","\n","model2.compile(optimizer='adam', loss='mae')\n","model2.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4EAlCyH0Aq1n","executionInfo":{"status":"ok","timestamp":1700085928320,"user_tz":360,"elapsed":227,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"}},"outputId":"663ec4c4-6f20-47a6-a429-16b89525b487"},"id":"4EAlCyH0Aq1n","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," lstm_2 (LSTM)               (None, 16)                1344      \n","                                                                 \n"," dense_2 (Dense)             (None, 1)                 17        \n","                                                                 \n","=================================================================\n","Total params: 1361 (5.32 KB)\n","Trainable params: 1361 (5.32 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["checkpoint2 = ModelCheckpoint('BestModel2.hdf5', monitor='val_loss', save_best_only=True, mode='min')\n","history2 = model2.fit(mtrain_dataset, epochs=epochs, validation_data=mval_dataset, callbacks=[checkpoint2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2wALNQldA4An","executionInfo":{"status":"ok","timestamp":1700086638703,"user_tz":360,"elapsed":699295,"user":{"displayName":"Jesus Tolentino Ramirez","userId":"05690869890081942440"}},"outputId":"9f5de216-79d5-4191-fac4-8c4ffab3bf55"},"id":"2wALNQldA4An","execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","3283/3283 [==============================] - 65s 19ms/step - loss: 7.5864 - val_loss: 6.6537\n","Epoch 2/10\n","   9/3283 [..............................] - ETA: 44s - loss: 12.2839"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n","  saving_api.save_model(\n"]},{"output_type":"stream","name":"stdout","text":["3283/3283 [==============================] - 60s 18ms/step - loss: 7.1012 - val_loss: 6.5969\n","Epoch 3/10\n","3283/3283 [==============================] - 60s 18ms/step - loss: 7.1050 - val_loss: 6.5921\n","Epoch 4/10\n","3283/3283 [==============================] - 59s 18ms/step - loss: 7.1053 - val_loss: 6.5882\n","Epoch 5/10\n","3283/3283 [==============================] - 63s 19ms/step - loss: 7.1009 - val_loss: 6.5903\n","Epoch 6/10\n","3283/3283 [==============================] - 59s 18ms/step - loss: 7.1008 - val_loss: 6.5905\n","Epoch 7/10\n","3283/3283 [==============================] - 58s 18ms/step - loss: 7.1007 - val_loss: 6.5905\n","Epoch 8/10\n","3283/3283 [==============================] - 63s 19ms/step - loss: 7.1007 - val_loss: 6.5905\n","Epoch 9/10\n","3283/3283 [==============================] - 61s 19ms/step - loss: 7.1008 - val_loss: 6.5905\n","Epoch 10/10\n","3283/3283 [==============================] - 66s 20ms/step - loss: 7.1007 - val_loss: 6.5905\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[{"file_id":"1jG6q-qYa-JzB5X6AdJmfnwLT9jRyvIo9","timestamp":1699996031870}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.5"}},"nbformat":4,"nbformat_minor":5}